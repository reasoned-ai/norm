// Declare lambdas
test(a:String, b:Integer);

// Export lambdas
export test$AWeq23 norm.test;

// Import lambdas
import norm.test.test$AWeq23 as tt;

// Adding some data
test := ('sfs', 4)
      | ('fff', 1)
      ;
test('aa', 6);

// Add another attribute
test &= (t:Datetime, p:Person);

// Retype attributes and add another attribute
test &= (t: String);

// Rename an attribute
test &= (a -> b);

// Add another attribute implicitly with values
utcnow := {{
    import datetime
    return datetime.datetime.utcnow
}};

// automatically adding t2 as a Datetime type (inferred by the now output type)
test &= utcnow()?t2;

// evaluate and query data
// create an empty object
test();
// create an object
test('aa', 6);
// same as the above
test('aa', b=6);
// query the data where b==6
test('aa', b==6);
// same as the above
test('aa', b==6)?;
// same as the above
test('aa', b=6)?;
// query all data
test?;
// same as the above
test()?;
// query for a in all data
test(a?);
// query for a and b in all data
test(a?, b?);
test(a='sfs', b?);
test(a~'s'?, b>3);

test &= gaussian(mu=2, gamma=0.1, b)?prob;
test &= view(p, time<t, page?);

// Sort on an attribute
test.desc(t);

// Group by an attribute and take the mean
tt := with test.foreach(t), a.mean()?a_mean & a.max()?a_max & b.mean()?b_mean;
tt := with test.foreach(t).exists(a), a > 3;

// Extract a pattern on an attribute
test &= extract(a, p'sf')?sf;

// Extract a pattern on multiple attributes
test &= extract(a, p'sf(\W+)([0-9]+)')?(v1, v2);

// Access a nested attribute
test &= extract(p.name, p'^tom')?is_tom;

// Slicing with one object
test[1];

// Slicing with multiple object
test[3:7];
test[:9];
test[2:];
test[:-2];

// match(s:String, p:Pattern)
matched = ['s', 'sf', 'aa']?p & match(test.a, p)?pattern_{p};


// Inheritance
animal(name: String, speak: String, num_of_legs: Integer);
duck := animal(name: String, speak='guagua', num_of_legs=2);
frog := animal(name: String, speak='rubit', num_of_legs=4);
